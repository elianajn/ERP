import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from scipy.signal import find_peaks

openbci_datapath = '/Users/cm/Desktop/erp/analogueboi.txt'
sample_rate = 250


# data = pd.read_csv(openbci_datapath, sep=",", header=6, index_col=False, names=['index', 'ch1', 'ch2', 'ch3', 'ch4', 'ch5', 'ch6', 'ch7', 'ch8', 'A5', 'A6', 'A7', 'Time', 'TimeStamp'], usecols=['ch1', 'ch2', 'ch3', 'ch4', 'ch5', 'ch6', 'ch7', 'ch8', 'A7', 'TimeStamp'])
data = pd.read_csv(openbci_datapath, sep=", ", header=4, index_col=False, engine='python', usecols=['EXG Channel 0', 'EXG Channel 1', 'EXG Channel 2', 'EXG Channel 3', 'EXG Channel 4', 'EXG Channel 5', 'EXG Channel 6', 'EXG Channel 7', 'Analog Channel 1', 'Analog Channel 2', 'Timestamp'])
new_names = {'EXG Channel 0':'ch1', 'EXG Channel 1':'ch2', 'EXG Channel 2':'ch3', 'EXG Channel 3':'ch4', 'EXG Channel 4':'ch5', 'EXG Channel 5':'ch6', 'EXG Channel 6':'ch7', 'EXG Channel 7':'ch8', 'Analog Channel 1':'A6', 'Analog Channel 2':'A7', 'Timestamp':'TimeStamp'}
data = data.rename(columns=new_names)

print("OpenBCI data shape: ", data.shape)
print(data.columns)
# Timestamps = (data['TimeStamp'].to_numpy() - data['TimeStamp'].to_numpy()[0])/1000
Timestamps = (data['TimeStamp'].to_numpy() - data['TimeStamp'].to_numpy()[0])
print("Timestamps shape: ", Timestamps.shape)
print("Total length of data: ", Timestamps[-1], 's')
EEG_data = data[['ch1', 'ch2', 'ch3', 'ch4', 'ch5', 'ch6', 'ch7', 'ch8']].to_numpy()
print(EEG_data)
print("EEG data shape: ", EEG_data.shape)
for i in range(EEG_data.shape[1]):
    # plt.plot(EEG_data[:,i]/np.mean(EEG_data[:,i])+i)
    plt.plot(EEG_data[:,i]/np.mean(EEG_data[:,i])+i, label=data.columns[i])
plt.xticks(ticks=np.arange(0, round(Timestamps[-1]+1)*sample_rate, round(Timestamps[-1]+1)*sample_rate/4), 
           labels=np.arange(0, round(Timestamps[-1]+1),round(Timestamps[-1]+1)/4))
plt.xlabel('Time (s)')
plt.legend()
plt.tight_layout
plt.savefig('eeg.png')
analog_data = data['A6']
print("analog data shape: ", analog_data.shape)
plt.plot(analog_data)
plt.xticks(ticks=np.arange(0, round(Timestamps[-1]+1)*sample_rate, round(Timestamps[-1]+1)*sample_rate/5), 
           labels=np.arange(0, round(Timestamps[-1]+1),round(Timestamps[-1]+1)/5))
plt.xlabel('Time (s)')
plt.tight_layout
peaks, _ = find_peaks(analog_data, height=(5, 20), distance=0.1*250) # distance is essential!
print(peaks)
fig, ax = plt.subplots(1, 3, figsize=(20,5))

ax[0].plot(analog_data)
ax[0].plot(peaks, analog_data[peaks], "x")
ax[0].set_ylim(-2, 20)
ax[0].title.set_text('Summary')
ax[0].set_xticks(ticks=np.arange(0, len(analog_data), len(analog_data)/4))
ax[0].set_xticklabels(labels=np.arange(0, len(analog_data)/250,len(analog_data)/250/4))

# Start 
ax[1].plot(analog_data)
ax[1].plot(peaks, analog_data[peaks], "x")
ax[1].set_xlim(1000,3000)
ax[1].set_ylim(-2, 20)
ax[1].title.set_text('4 - 12 s')
ax[1].set_xticks(ticks=np.arange(1000, 3000, 2000/4))
ax[1].set_xticklabels(labels=np.arange(1000/250, 3000/250, 2000/250/4))

# End
ax[2].plot(analog_data)
ax[2].plot(peaks, analog_data[peaks], "x")
ax[2].set_xlim(28000,30000)
ax[2].set_ylim(-2, 20)
ax[2].title.set_text('112 - 120 s')
ax[2].set_xticks(ticks=np.arange(28000, 30000, 2000/4))
ax[2].set_xticklabels(labels=np.arange(28000/250, 30000/250, 2000/250/4))

fig.savefig('fig.png')

print("Total number of peaks: ", len(peaks))
image_peaks = peaks[4:4+22]
len(image_peaks)
label_path = '/Users/cm/Desktop/erp/OpenBCI_Experiment-master/labels.txt'

label_data = pd.read_csv(label_path, sep=',', index_col=False, names=['label_index', 'label', 'filename'])
index_array = label_data['label_index'].to_numpy()
labels = np.zeros(len(EEG_data))

for i in range(len(image_peaks)):
    peak_timestamp = image_peaks[i]
    labels[peak_timestamp] = index_array[i]+1
    

for i in range(EEG_data.shape[1]):
    plt.plot(EEG_data[:,i]/np.mean(EEG_data[:,i])-i)
plt.xticks(ticks=np.arange(0, round(Timestamps[-1]+1)*sample_rate, round(Timestamps[-1]+1)*sample_rate/4), 
           labels=np.arange(0, round(Timestamps[-1]+1),round(Timestamps[-1]+1)/4))
plt.plot(labels-i-2)
plt.xlabel('Time (s)')
plt.tight_layout
plt.legend(['ch1', 'ch2', 'ch3', 'ch4', 'ch5', 'ch6', 'ch7', 'ch8', 'label'])